/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieArchive;
import hr.algebra.model.User;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.JAXBUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author filip
 */
public class MoviesApp extends javax.swing.JFrame {

    private final User user;

    private static final String DIR = "XMLDownload";
    private static final String FILENAME = "moviearchive.xml";
    private static final String PATH = DIR + File.separator + FILENAME;

    Repository repository;
    List<Movie> selectedMovies;

    /**
     * Creates new form MoviesApp
     */

    public MoviesApp(User user) {
        this.user = user;
        initComponents();
        initTabs();
        initRepository();
        handleLookAndFeel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        menuBar = new javax.swing.JMenuBar();
        mApp = new javax.swing.JMenu();
        miExit = new javax.swing.JMenuItem();
        mXml = new javax.swing.JMenu();
        miXmlDownload = new javax.swing.JMenuItem();
        mView = new javax.swing.JMenu();
        mLookAndFeel = new javax.swing.JMenu();
        mHelp = new javax.swing.JMenu();
        maAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movies app");

        mApp.setMnemonic('A');
        mApp.setText("App");

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        mApp.add(miExit);

        menuBar.add(mApp);

        mXml.setMnemonic('X');
        mXml.setText("XML");

        miXmlDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        miXmlDownload.setText("XML Download");
        miXmlDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miXmlDownloadActionPerformed(evt);
            }
        });
        mXml.add(miXmlDownload);

        menuBar.add(mXml);

        mView.setMnemonic('V');
        mView.setText("View");

        mLookAndFeel.setMnemonic('L');
        mLookAndFeel.setText("Look & Feel");
        mView.add(mLookAndFeel);

        menuBar.add(mView);

        mHelp.setMnemonic('H');
        mHelp.setText("Help");

        maAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        maAbout.setText("About");
        maAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maAboutActionPerformed(evt);
            }
        });
        mHelp.add(maAbout);

        menuBar.add(mHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tpContent, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tpContent, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miXmlDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miXmlDownloadActionPerformed
       
        new Thread(() -> {

            try {
                selectedMovies = repository.selectMovies();

                FileUtils.createDirHierarchy(PATH);

                JAXBUtils.save(new MovieArchive(selectedMovies), PATH);
                MessageUtils.showInformationMessage("Info", "XML Download successful! File can be found at XMLDownload/paperarchive.xml");

            } catch (Exception ex) {
                Logger.getLogger(MoviesApp.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Error saving XML Download file!");
            }

        }).start();
        
    }//GEN-LAST:event_miXmlDownloadActionPerformed

    private void maAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maAboutActionPerformed
        MessageUtils.showInformationMessage("Movies App", "Application that downloads data from Croatian cinema 'Cinestar' page \n Version 1.0");
    }//GEN-LAST:event_maAboutActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu mApp;
    private javax.swing.JMenu mHelp;
    private javax.swing.JMenu mLookAndFeel;
    private javax.swing.JMenu mView;
    private javax.swing.JMenu mXml;
    private javax.swing.JMenuItem maAbout;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenuItem miXmlDownload;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private void initTabs() {
        if (user.getIsAdmin() == true) {

            tpContent.add("Upload movies", new UploadMoviesPanel());
        } else {
            tpContent.add("Edit movies", new CRUDMoviesPanel());
            tpContent.add("Edit actors/directors", new CRUDPersonsPanel());
        }
    }

    private void initRepository() {
        try {
            repository = RepositoryFactory.getRepository();
        } catch (Exception ex) {
            Logger.getLogger(MoviesApp.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Error getting repository in MoviesApp form!");
        }
    }

    private void handleLookAndFeel() {
        ButtonGroup bgLookFeel = new ButtonGroup();
        Arrays.asList(UIManager.getInstalledLookAndFeels()).forEach(lf -> {
            JRadioButtonMenuItem mi = new JRadioButtonMenuItem(lf.getName());
            bgLookFeel.add(mi);
            mLookAndFeel.add(mi);
            if ("Windows".equals(lf.getName())) {
                mi.setSelected(true);
            }
            mi.addActionListener(e -> {
                try {
                    UIManager.setLookAndFeel(lf.getClassName());
                    SwingUtilities.updateComponentTreeUI(MoviesApp.this);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MoviesApp.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        });
    }

}
