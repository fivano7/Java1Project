package hr.algebra;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.model.GenreTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.JTextComponent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author filip
 */
public class CRUDMoviesPanel extends javax.swing.JPanel {

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private JList sourceJList;

    private final Set<Person> movieActors = new TreeSet<>();
    private final Set<Person> allActors = new TreeSet<>();

    private final Set<Genre> movieGenres = new TreeSet<>();
    private final Set<Genre> allGenres = new TreeSet<>();

    private final Set<Person> movieDirectors = new TreeSet<>();
    private final Set<Person> allDirectors = new TreeSet<>();

    private final DefaultListModel<Person> movieActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allActorsModel = new DefaultListModel<>();

    private final DefaultListModel<Genre> movieGenresModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();

    private final DefaultListModel<Person> movieDirectorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allDirectorsModel = new DefaultListModel<>();

    private static final String DIR = "assets";

    private Repository repository;
    private MovieTableModel moviesTableModel;

    private Movie selectedMovie;

    /*
     * Creates new form CRUDMovies
     */
    public CRUDMoviesPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel19 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lblTitleError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lblPublishedDateError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        spDescription = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lblLinkError = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        lblImageError = new javax.swing.JLabel();
        tfImage = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnUploadImage = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovie = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsMovieActors = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsMovieGenres = new javax.swing.JList<>();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        lblActorsError = new javax.swing.JLabel();
        lblGenresError = new javax.swing.JLabel();
        btnDeleteMovie = new javax.swing.JButton();
        btnUpdateMovie = new javax.swing.JButton();
        btnAddMovie = new javax.swing.JButton();
        btnRemoveActor = new javax.swing.JButton();
        btnRemoveGenre = new javax.swing.JButton();
        btnRemoveDirector = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        lsMovieDirectors = new javax.swing.JList<>();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        lblDirectorsError = new javax.swing.JLabel();
        tfLength = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        lblLengthError = new javax.swing.JLabel();

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel19.setForeground(java.awt.Color.red);
        jLabel19.setText("X");

        setPreferredSize(new java.awt.Dimension(900, 700));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title:");

        lblTitleError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblTitleError.setForeground(java.awt.Color.red);

        jLabel3.setText("Published date (yyyy-MM-ddThh:mm:ss):");

        tfPublishedDate.setName("Date"); // NOI18N

        lblPublishedDateError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblPublishedDateError.setForeground(java.awt.Color.red);

        jLabel5.setText("Description:");

        lblDescriptionError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblDescriptionError.setForeground(java.awt.Color.red);

        taDescription.setColumns(20);
        taDescription.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        spDescription.setViewportView(taDescription);

        jLabel9.setText("Link:");

        tfLink.setName(""); // NOI18N

        lblLinkError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblLinkError.setForeground(java.awt.Color.red);

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/defaultIconMovieSmall.png"))); // NOI18N
        lblImage.setPreferredSize(new java.awt.Dimension(150, 217));

        lblImageError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblImageError.setForeground(java.awt.Color.red);

        tfImage.setEditable(false);

        jLabel13.setText("Image:");

        btnUploadImage.setText("Upload");
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageActionPerformed(evt);
            }
        });

        tbMovie.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMovieMouseClicked(evt);
            }
        });
        tbMovie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMovieKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovie);

        jScrollPane3.setViewportView(lsMovieActors);

        lsAllActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lsAllActorsMousePressed(evt);
            }
        });
        jScrollPane5.setViewportView(lsAllActors);

        jLabel14.setText("Actors:");

        jLabel15.setText("All actors:");

        jLabel16.setText("Genres:");

        jScrollPane6.setViewportView(lsMovieGenres);

        jLabel17.setText("All genres:");

        jScrollPane7.setViewportView(lsAllGenres);

        lblActorsError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblActorsError.setForeground(java.awt.Color.red);

        lblGenresError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblGenresError.setForeground(java.awt.Color.red);

        btnDeleteMovie.setText("Delete");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        btnUpdateMovie.setText("Update");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnAddMovie.setText("Add");
        btnAddMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMovieActionPerformed(evt);
            }
        });

        btnRemoveActor.setText("Remove actor");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnRemoveGenre.setText("Remove genre");
        btnRemoveGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreActionPerformed(evt);
            }
        });

        btnRemoveDirector.setText("Remove director");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        jLabel18.setText("Directors:");

        jScrollPane8.setViewportView(lsMovieDirectors);

        jLabel20.setText("All directors:");

        lsAllDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lsAllDirectorsMousePressed(evt);
            }
        });
        jScrollPane9.setViewportView(lsAllDirectors);

        lblDirectorsError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblDirectorsError.setForeground(java.awt.Color.red);

        tfLength.setName("Number"); // NOI18N

        jLabel10.setText("Length:");

        lblLengthError.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lblLengthError.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(tfImage, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(tfTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                                        .addComponent(tfPublishedDate, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDescriptionError, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblTitleError, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPublishedDateError, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblLengthError)
                                        .addComponent(lblImageError)))
                                .addGap(21, 21, 21))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnUploadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(spDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblLinkError)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRemoveGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddMovie, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                                        .addGap(25, 25, 25)
                                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnDeleteMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                                                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(0, 0, Short.MAX_VALUE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(lblActorsError)
                                                        .addComponent(lblGenresError)))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel18)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(lblDirectorsError)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel16)
                                                    .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel14))
                                                .addGap(94, 94, 94)))
                                        .addGap(25, 25, 25)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel20)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel15))))
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTitleError)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPublishedDateError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(spDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblDescriptionError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLinkError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUploadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblImageError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLengthError)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(lblActorsError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(1, 1, 1)
                        .addComponent(btnRemoveActor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(lblGenresError)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRemoveGenre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblDirectorsError))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1, 1, 1)
                        .addComponent(btnRemoveDirector)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMovieActionPerformed
        if (formValid()) {

            try {
                String localPicturePath = uploadPicture();

                getMovieActorsGenresAndDirectorsFromList();

                Movie movie = new Movie(tfTitle.getText().trim(), LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER), taDescription.getText().trim(), movieDirectors, WIDTH, localPicturePath, movieGenres, movieActors, tfLink.getText().trim());

                repository.createMovie(movie);
                moviesTableModel.setMovies(repository.selectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnAddMovieActionPerformed

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (formValid()) {
            try {

                if (!tfImage.getText().trim().equals(selectedMovie.getPicturePath())) {
                    if (selectedMovie.getPicturePath() != null) {
                        Files.delete(Paths.get(selectedMovie.getPicturePath()));
                    }
                    String path = uploadPicture();
                    selectedMovie.setPicturePath(path);

                }

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setLength(Integer.valueOf(tfLength.getText().trim()));
                selectedMovie.setLink(tfLink.getText().trim());

                getMovieActorsGenresAndDirectorsFromList();

                selectedMovie.setActors(movieActors);
                selectedMovie.setGenres(movieGenres);
                selectedMovie.setDirectors(movieDirectors);

                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                moviesTableModel.setMovies(repository.selectMovies());

                clearForm();

                selectedMovie = null;
            } catch (Exception ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie!");
            }
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed

        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPicturePath() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPicturePath()));
                }
                repository.deleteMovie(selectedMovie.getId());
                moviesTableModel.setMovies(repository.selectMovies());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed

        Person selectedActor = lsMovieActors.getSelectedValue();

        if (selectedActor != null) {

            movieActorsModel.removeElement(selectedActor);
            movieActors.remove(selectedActor);
        } else {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose an actor to remove");
        }


    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnRemoveGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreActionPerformed

        Genre selectedGenre = lsMovieGenres.getSelectedValue();

        if (selectedGenre != null) {

            movieGenresModel.removeElement(selectedGenre);
            movieGenres.remove(selectedGenre);
        } else {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a genre to remove");
        }
    }//GEN-LAST:event_btnRemoveGenreActionPerformed

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        Person selectedDirector = lsMovieDirectors.getSelectedValue();

        if (selectedDirector != null) {

            movieDirectorsModel.removeElement(selectedDirector);
            movieDirectors.remove(selectedDirector);
        } else {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a director to remove");
        }
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed

    private void btnUploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageActionPerformed
        File file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfImage.setText(file.getAbsolutePath());
        setIcon(lblImage, file);
    }//GEN-LAST:event_btnUploadImageActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();

    }//GEN-LAST:event_formComponentShown

    private void tbMovieMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMovieMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMovieMouseClicked

    private void lsAllDirectorsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllDirectorsMousePressed
        sourceJList = lsAllDirectors;
    }//GEN-LAST:event_lsAllDirectorsMousePressed

    private void lsAllActorsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllActorsMousePressed
        sourceJList = lsAllActors;
    }//GEN-LAST:event_lsAllActorsMousePressed

    private void tbMovieKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMovieKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {
            showMovie();
        }
    }//GEN-LAST:event_tbMovieKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMovie;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JButton btnRemoveGenre;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblActorsError;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDirectorsError;
    private javax.swing.JLabel lblGenresError;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblImageError;
    private javax.swing.JLabel lblLengthError;
    private javax.swing.JLabel lblLinkError;
    private javax.swing.JLabel lblPublishedDateError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList<Person> lsAllActors;
    private javax.swing.JList<Person> lsAllDirectors;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Person> lsMovieActors;
    private javax.swing.JList<Person> lsMovieDirectors;
    private javax.swing.JList<Genre> lsMovieGenres;
    private javax.swing.JScrollPane spDescription;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovie;
    private javax.swing.JTextField tfImage;
    private javax.swing.JTextField tfLength;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }

            if ("Number".equals(validationFields.get(i).getName())) {
                try {
                    Integer.valueOf(validationFields.get(i).getText().trim());
                    errorLabels.get(i).setText("");
                } catch (Exception ex) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }

            if (lsMovieActors.getModel().getSize() == 0) {
                lblActorsError.setText("X");
                ok = false;
            } else {
                lblActorsError.setText("");
            }

            if (lsMovieGenres.getModel().getSize() == 0) {
                lblGenresError.setText("X");
                ok = false;
            } else {
                lblGenresError.setText("");
            }

            if (lsMovieDirectors.getModel().getSize() == 0) {
                lblDirectorsError.setText("X");
                ok = false;
            } else {
                lblDirectorsError.setText("");
            }

        }

        return ok;
    }

    private void init() {

        new Thread(() -> {

            try {
                initValidation();
                initRepository();
                initTable();

                java.awt.EventQueue.invokeLater(() -> {
                    loadAllActorsAllGenresAndAllDirectorsList();
                    initDragNDrop();
                    showMovie();
                });

            } catch (Exception ex) {
                Logger.getLogger(CRUDMoviesPanel.class
                        .getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
                System.exit(1);
            }

        }).start();

    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPublishedDate, taDescription, tfLength, tfImage, tfLink);
        errorLabels = Arrays.asList(lblTitleError, lblPublishedDateError, lblDescriptionError, lblLengthError, lblImageError, lblLinkError);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovie.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovie.setAutoCreateRowSorter(true);
        tbMovie.setRowHeight(25);
        moviesTableModel = new MovieTableModel(repository.selectMovies());
        tbMovie.setModel(moviesTableModel);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        tbMovie.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        tbMovie.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);

        if (tbMovie.getRowCount() == 0) {
            MessageUtils.showInformationMessage("Warning", "Data is empty! Please contact administrator to upload data!");
        }
    }

    private String uploadPicture() throws IOException {

        String picturePath = tfImage.getText().trim();

        String ext = picturePath.substring(picturePath.lastIndexOf("."));

        String pictureName = UUID.randomUUID() + ext;
        String path = DIR + File.separator + pictureName;

        FileUtils.copy(picturePath, path);

        return path;
    }

    private void clearForm() {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));

        movieActorsModel.clear();
        movieActors.clear();

        movieGenresModel.clear();
        movieGenres.clear();

        movieDirectorsModel.clear();
        movieDirectors.clear();

        lsAllActors.clearSelection();
        lsAllGenres.clearSelection();
        lsAllDirectors.clearSelection();

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/defaultIconMovieSmall.png"))); // NOI18N

    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file, label.getWidth(), label.getHeight()));

        } catch (IOException ex) {
            Logger.getLogger(CRUDMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon!");
        }
    }

    //OVO
    private void showMovie() {
        clearForm();

        if (tbMovie.getSelectedRow() != -1) {
            int selectedRow = tbMovie.getSelectedRow();
            int rowIndex = tbMovie.convertRowIndexToModel(selectedRow);
            int selectedMovieID = (int) moviesTableModel.getValueAt(rowIndex, 0);

            try {
                Optional<Movie> optMovie = repository.selectMovie(selectedMovieID);
                if (optMovie.isPresent()) {
                    selectedMovie = optMovie.get();
                    fillForm(selectedMovie);

                }
            } catch (Exception ex) {
                Logger.getLogger(CRUDMoviesPanel.class
                        .getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to show movie!");
            }

            taDescription.setCaretPosition(0);
        }
    }

    //OVO
    private void fillForm(Movie selectedMovie) {
        if (selectedMovie.getPicturePath() != null && Files.exists(Paths.get(selectedMovie.getPicturePath()))) {
            tfImage.setText(selectedMovie.getPicturePath());

            try {
                setIcon(lblImage, new File(selectedMovie.getPicturePath()));
            } catch (Exception e) {
                System.out.println("Error with image!");
            }
        }

        tfLength.setText(String.valueOf(selectedMovie.getLength()));

        tfTitle.setText(selectedMovie.getTitle());
        tfLength.setText(String.valueOf(selectedMovie.getLength()));
        tfLink.setText(selectedMovie.getLink());
        taDescription.setText(selectedMovie.getDescription());
        tfPublishedDate.setText(selectedMovie.getPublishedDate().format(Movie.DATE_FORMATTER));

        loadMovieActorsMovieGenresAndMovieDirectorsList();

    }

    private void loadMovieActorsModel() {
        movieActorsModel.clear();
        movieActors.forEach(movieActorsModel::addElement);
        lsMovieActors.setModel(movieActorsModel);

    }

    private void loadAllActorsModel() {
        allActorsModel.clear();
        allActors.forEach(allActorsModel::addElement);
        lsAllActors.setModel(allActorsModel);
    }

    private void loadMovieGenresModel() {
        movieGenresModel.clear();
        movieGenres.forEach(movieGenresModel::addElement);
        lsMovieGenres.setModel(movieGenresModel);

    }

    private void loadAllGenresModel() {
        allGenresModel.clear();
        allGenres.forEach(allGenresModel::addElement);
        lsAllGenres.setModel(allGenresModel);
    }

    private void loadMovieDirectorsModel() {
        movieDirectorsModel.clear();
        movieDirectors.forEach(movieDirectorsModel::addElement);
        lsMovieDirectors.setModel(movieDirectorsModel);
    }

    private void loadAllDirectorsModel() {
        allDirectorsModel.clear();
        allDirectors.forEach(allDirectorsModel::addElement);
        lsAllDirectors.setModel(allDirectorsModel);
    }

    private void loadAllActorsAllGenresAndAllDirectorsList() {

        try {
            allActors.clear();
            allGenres.clear();
            allDirectors.clear();

            allActors.addAll(repository.selectAllPersons());
            allGenres.addAll(repository.selectAllGenres());
            allDirectors.addAll(repository.selectAllPersons());

            loadAllActorsModel();
            loadAllGenresModel();
            loadAllDirectorsModel();

        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadMovieActorsMovieGenresAndMovieDirectorsList() {
        try {
            movieActors.clear();
            movieGenres.clear();
            movieDirectors.clear();

            movieActors.addAll(selectedMovie.getActors());
            movieGenres.addAll(selectedMovie.getGenres());
            movieDirectors.addAll(selectedMovie.getDirectors());

            loadMovieActorsModel();
            loadMovieGenresModel();
            loadMovieDirectorsModel();

        } catch (Exception ex) {
            Logger.getLogger(CRUDMoviesPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getMovieActorsGenresAndDirectorsFromList() {

        movieActors.clear();
        movieGenres.clear();
        movieDirectors.clear();

        Arrays.asList(movieActorsModel.toArray()).forEach(a -> movieActors.add((Person) a));
        Arrays.asList(movieGenresModel.toArray()).forEach(g -> movieGenres.add((Genre) g));
        Arrays.asList(movieDirectorsModel.toArray()).forEach(d -> movieDirectors.add((Person) d));

    }

    private void initDragNDrop() {
        //Actors
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportPersonHandler());

        lsMovieActors.setDropMode(DropMode.ON);
        lsMovieActors.setTransferHandler(new ImportPersonsHandler(movieActors));

        //Genres
        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new ExportGenresHandler());

        lsMovieGenres.setDropMode(DropMode.ON);
        lsMovieGenres.setTransferHandler(new ImportGenresHandler());

        //Directors
        lsAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setTransferHandler(new ExportPersonHandler());

        lsMovieDirectors.setDropMode(DropMode.ON);
        lsMovieDirectors.setTransferHandler(new ImportPersonsHandler(movieDirectors));

    }

    private class ExportPersonHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        //author selection
        @Override
        protected Transferable createTransferable(JComponent c) {
            if (sourceJList == lsAllActors) {
                return new PersonTransferable((Person) lsAllActors.getSelectedValue());

            } else {
                return new PersonTransferable((Person) lsAllDirectors.getSelectedValue());
            }

        }
    }

    private class ImportPersonsHandler extends TransferHandler {

        private final Set<Person> destinationSet;

        public ImportPersonsHandler(Set<Person> destinationSet) {
            this.destinationSet = destinationSet;
        }

        //string flavour
        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {

            Transferable transferable = support.getTransferable();

            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (destinationSet.add(data)) {
                    loadMovieActorsModel();
                    loadMovieDirectorsModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }

    private class ExportGenresHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        }
    }

    private class ImportGenresHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {

            Transferable transferable = support.getTransferable();
            try {
                Genre data = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);

                if (movieGenres.add(data)) {
                    loadMovieGenresModel();
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(CRUDMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }

}
